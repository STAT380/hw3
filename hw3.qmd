---
title: "Homework 3"
author: "[Diana Batista Capellan]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
#format: html
format: pdf
---

---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
```

<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ";") # Insert your code here
df2 <- read.csv(url2, sep = ";") # Insert your code here
```

---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.


```{R}
# Combine the two data frames into a single data frame df
df <- rbind(cbind(df1, type = "white"), cbind(df2, type = "red"))

# Rename the columns of df to replace spaces with underscores
colnames(df) <- gsub("\\.", "_", colnames(df))

#Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
df <- df[, !(colnames(df) %in% c("fixed_acidity", "free_sulfur_dioxide"))] 

#Convert the `type` column to a factor
df$type <- as.factor(df$type)

#Remove rows (if any) with missing values
df <- na.omit(df)

dim(df)
```


Your output to `R dim(df)` should be
```
[1] 6497   11
```



---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```{R}
# Compute the mean of quality for red and white wine separately
mean_red <- mean(df$quality[df$type == "red"])
mean_white <- mean(df$quality[df$type == "white"])

# Compute the difference in means
diff_mean <- mean_red - mean_white

# Compute the pooled sample variance (equal variance assumption)
var_red <- var(df$quality[df$type == "red"])
var_white <- var(df$quality[df$type == "white"])
n_red <- sum(df$type == "red")
n_white <- sum(df$type == "white")

sp <- ((n_red - 1) * var_red + (n_white - 1) * var_white) / (n_red + n_white - 2)

# Compute the t-statistic
t1 <- diff_mean / sqrt(sp * (1/n_red + 1/n_white))
t1
```


---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```{R}
t_test <- t.test(quality ~ type, data = df, var.equal = TRUE) # Insert your code here
t2 <- t_test$statistic # Insert your code here
t2
```

---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```{R}
fit <- lm(quality ~ type, data = df) # Insert your here
t3 <- summary(fit)$coefficients["typewhite", "t value"] # Insert your here
t3
```


---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

```{R}
c(t1, t2, t3) # Insert your code here
print("There is evidence of a difference in means between red and white wines")
print("This is because the values are significantly consistent")
```




<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?


```{R}
# Fit a linear regression model with all predictors
fit_all_predictors <- lm(quality ~ ., data = df)

library(broom)
# Use the tidy function to print a summary of the fitted model
tidy(fit_all_predictors)
# Insert your code here

print("This summary will give us diferent information about predictors")
print("The info is in comparison to quality")
```


---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?


```{R}
model_citric <- lm(quality ~ citric_acid, data = df) # Insert your code here
tidy(model_citric)
```

```{R}
model_sulfur <- lm(quality ~ total_sulfur_dioxide, data = df) # Insert your code here
tidy(model_sulfur)

print("The biggest diference is we can compare specific coefficients now.")
```


---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
library(corrplot)

df %>%
  select_if(is.numeric) %>%
  cor() %>%
  corrplot(method = "color", col = colorRampPalette(c("purple", "white", "deeppink"))(10), tl.col = "darkblue") # Insert your code here
```



---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?


```{R}
# Fit a linear regression model with all predictors
fit_all_predictors <- lm(quality ~ ., data = df)

# Compute VIF for each predictor
vif(fit_all_predictors) # Insert your code here

print("All values are less than 10, so there is no cause of concern")
```



<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```{R}
# Fit a linear regression model with all predictors
full_model <- lm(quality ~ ., data = df)

# Extract the final formula
backward_formula <- formula(step(full_model, direction = "backward")) # Insert your code here
```

---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```{R}
null_model <- lm(quality ~ 1, data = df)

# Extract the final formula
forward_formula <- formula(step(null_model, direction = "forward")) # Insert your code here
```



---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```{R}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}

y = df$quality

# Create a design matrix X for the full_model object
full_model_formula <- quality ~ .
X <- make_model_matrix(full_model_formula) 

# LASSO regression
lasso_model <- cv.glmnet(X, y, alpha = 1)

# Ridge regression
ridge_model <- cv.glmnet(X, y, alpha = 0) # Insert your code here. 
```

Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```{R}
par(mfrow=c(1, 2))

plot(lasso_model, main = "LASSO")

plot(ridge_model, main = "Ridge") # Insert your code here. 
```

---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 
```{r}
# Extract coefficients at lambda.1se
lasso_coef <- predict(lasso_model, newx = X, s = "lambda.1se", type = "coefficients")

# Print the coefficients
print(lasso_coef)

# Identify variables with non-zero coefficients
lasso_vars <- names(lasso_coef)
lasso_vars

lasso_formula <- NULL
```

---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 
```{r}
ridge_coef <- coef(ridge_model, s = "lambda.1se")
ridge_coef
# Identify variables with non-zero coefficients
ridge_vars <- names(ridge_coef)
ridge_vars
ridge_formula <- NULL
```


---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?
```{r}
print("They are different becuase they produce different coefficients")
```






<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 
```{r}
print("the total number of different models you can create is: 2^10=1024")
```


---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
x_vars <- colnames(df %>% select(-quality))
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```{R}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

formulas <- map(
  1:length(x_vars), function(x){
    vars <- combn(x_vars, length(x), simplify = TRUE) # Insert code here
    map(vars, ~ make_formula(.x)) # Insert code here
  }
) %>% unlist()
sample(formulas, 4) %>% as.character()
```

If your code is right the following command should return something along the lines of:

```R
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.

```{R}
models <- map(formulas, ~ lm(.x, data = df)) # Insert your code here
summaries <- map(models, glance) # Insert your code here

all_summaries <- bind_rows(summaries)
```



---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```{R}
# Extract the adj.r.squared values from summaries
adj_r_squared_values <- all_summaries$adj.r.squared

# Identify the index of the formula with the highest adjusted R-squared value
index_max_adj_r_squared <- which.max(adj_r_squared_values) # Insert your code here
```

Store resulting formula as a variable called `rsq_formula`.

```{R}
rsq_formula <- formulas[[index_max_adj_r_squared]] # Insert your code
```

---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.


```{R}
# Extract the AIC values from summaries
aic_values <- all_summaries$AIC

# Identify the index of the formula with the lowest AIC value
index_min_aic <- which.min(aic_values) # Insert your code here
```

Store resulting formula as a variable called `aic_formula`.


```{R}
aic_formula <- formulas[[index_min_aic]] # Insert your code
```

---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.

```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```

* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?
```{r}
print("they are not necessarily the same, as they are derived from different criteria")
```

* Which of these is more reliable? Why? 
```{r}
print("in my opinion AIC is morereliable")
```

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?
```{r}
print("I would use AIC becasue it avoids overfitting")
```

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.

```{R}
summary_table <-summary_table <- map(final_formulas, ~ glance(lm(.x, data = df))) %>% bind_rows()

summary_table %>% knitr::kable()
```





:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---


# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```R
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```R
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```




::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::